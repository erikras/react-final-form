// @flow
import * as React from 'react'
import type {
  Api,
  Config,
  FormState,
  FormSubscription,
  FieldSubscription
} from 'final-form'

export type ReactContext = {
  reactFinalForm: Api
}

export type FieldRenderProps = {
  input: {
    name: string,
    onBlur: (?SyntheticFocusEvent<*>) => void,
    onChange: (SyntheticInputEvent<*> | any) => void,
    onFocus: (?SyntheticFocusEvent<*>) => void,
    value: any
  },
  meta: $Shape<{
    // TODO: Make a diff of `FieldState` without all the functions
    active: boolean,
    dirty: boolean,
    error: boolean,
    initial: boolean,
    invalid: boolean,
    pristine: boolean,
    submitError: boolean,
    submitFailed: boolean,
    submitSucceeded: boolean,
    touched: boolean,
    valid: boolean,
    visited: boolean
  }>
}

export type FormRenderProps = {
  blur: (name: string) => void,
  change: (name: string, value: any) => void,
  focus: (name: string) => void,
  handleSubmit: (SyntheticEvent<HTMLFormElement>) => void,
  initialize: (values: Object) => void,
  reset: () => void
} & FormState

export type FormSpyRenderProps = FormState

export type RenderableProps<T> = $Shape<{
  children: ((props: T) => React.Node) | React.Node,
  component: React.ComponentType<*>,
  render: (props: T) => React.Node
}>

export type FormProps = {
  subscription?: FormSubscription
} & Config &
  RenderableProps<FormRenderProps>

export type FieldProps = {
  allowNull?: boolean,
  name: string,
  subscription?: FieldSubscription,
  validate?: (value: ?any, allValues: Object) => ?any,
  value?: any
} & RenderableProps<FieldRenderProps>

export type FormSpyProps = {
  onChange?: (formState: FormState) => void,
  subscription?: FormSubscription
} & RenderableProps<FormSpyRenderProps>
